<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Mirreal's Note]]></title>
  <link href="http://mirreal.github.io/atom.xml" rel="self"/>
  <link href="http://mirreal.github.io/"/>
  <updated>2014-09-03T00:27:39+08:00</updated>
  <id>http://mirreal.github.io/</id>
  <author>
    <name><![CDATA[Mirreal Ellison]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Information_theroy]]></title>
    <link href="http://mirreal.github.io/blog/2014/09/03/information-theroy/"/>
    <updated>2014-09-03T00:27:39+08:00</updated>
    <id>http://mirreal.github.io/blog/2014/09/03/information-theroy</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress + Github Pages]]></title>
    <link href="http://mirreal.github.io/blog/2014/09/01/octopress-plus-github-pages/"/>
    <updated>2014-09-01T15:04:01+08:00</updated>
    <id>http://mirreal.github.io/blog/2014/09/01/octopress-plus-github-pages</id>
    <content type="html"><![CDATA[<h2>Octopress + Github Pages</h2>

<h5><a href="http://octopress.org/docs/setup">document</a></h5>

<h5>Enviroment: Ubuntu 12.00</h5>

<h3>1.Installing Ruby With RVM</h3>

<h4>Install RVM</h4>

<pre><code>curl -L https://get.rvm.io | bash -s stable --ruby
</code></pre>

<p>Then run:</p>

<pre><code>source /home/exile/.rvm/scripts/rvm
</code></pre>

<p>to start RVM</p>

<h4>Install Ruby 1.9.3</h4>

<pre><code>rvm install 1.9.3
rvm use 1.9.3
rvm rubygems latest
</code></pre>

<h3>2.Deploying to Github Pages</h3>

<h4>With Github User/Organization pages</h4>

<p>Create a new Github repository and name the repository with the format <code>username.github.io</code></p>

<p>Just an empty repository is okay.</p>

<pre><code>rake setup_github_pages
</code></pre>

<p>Next run:</p>

<pre><code>rake deploy
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Double Queue]]></title>
    <link href="http://mirreal.github.io/blog/2014/07/02/double-queue/"/>
    <updated>2014-07-02T15:45:05+08:00</updated>
    <id>http://mirreal.github.io/blog/2014/07/02/double-queue</id>
    <content type="html"><![CDATA[<h2>double queue</h2>

<h3>double linked list</h3>

<figure class='code'><figcaption><span>double_queue.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">#</span><span class="nx">include</span> <span class="o">&lt;</span><span class="nx">stdio</span><span class="p">.</span><span class="nx">h</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">#</span><span class="nx">include</span> <span class="o">&lt;</span><span class="nx">stdlib</span><span class="p">.</span><span class="nx">h</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">typedef</span> <span class="kr">int</span> <span class="nx">data</span><span class="p">;</span>
</span><span class='line'><span class="nx">typedef</span> <span class="nx">struct</span> <span class="nx">node</span><span class="o">*</span> <span class="nx">node</span><span class="p">;</span>
</span><span class='line'><span class="nx">typedef</span> <span class="nx">struct</span> <span class="nx">double_queue</span><span class="o">*</span> <span class="nx">dqueue</span><span class="p">;</span>
</span><span class='line'><span class="nx">struct</span> <span class="nx">node</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">data</span> <span class="nx">item</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">node</span> <span class="nx">prev</span><span class="p">,</span> <span class="nx">next</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">struct</span> <span class="nx">double_queue</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">int</span> <span class="nx">count</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">node</span> <span class="nx">head</span><span class="p">,</span> <span class="nx">tail</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">void</span> <span class="nx">dq_init</span><span class="p">(</span><span class="nx">dqueue</span> <span class="nx">dq</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">dq</span><span class="o">-&gt;</span><span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">dq</span><span class="o">-&gt;</span><span class="nx">head</span> <span class="o">=</span> <span class="nx">dq</span><span class="o">-&gt;</span><span class="nx">tail</span> <span class="o">=</span> <span class="nx">NULL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">int</span> <span class="nx">dq_empty</span><span class="p">(</span><span class="nx">dqueue</span> <span class="nx">dq</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">dq</span><span class="o">-&gt;</span><span class="nx">count</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//add item from head</span>
</span><span class='line'><span class="k">void</span> <span class="nx">dq_unshift</span><span class="p">(</span><span class="nx">dqueue</span> <span class="nx">dq</span><span class="p">,</span> <span class="nx">data</span> <span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">node</span> <span class="nx">t</span> <span class="o">=</span> <span class="nx">malloc</span><span class="p">(</span><span class="nx">sizeof</span> <span class="o">*</span><span class="nx">t</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">t</span><span class="o">-&gt;</span><span class="nx">item</span> <span class="o">=</span> <span class="nx">item</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">t</span><span class="o">-&gt;</span><span class="nx">prev</span> <span class="o">=</span> <span class="nx">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">t</span><span class="o">-&gt;</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">dq</span><span class="o">-&gt;</span><span class="nx">head</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">dq</span><span class="o">-&gt;</span><span class="nx">count</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">dq</span><span class="o">-&gt;</span><span class="nx">head</span><span class="o">-&gt;</span><span class="nx">prev</span> <span class="o">=</span> <span class="nx">t</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">dq</span><span class="o">-&gt;</span><span class="nx">tail</span> <span class="o">=</span> <span class="nx">t</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">dq</span><span class="o">-&gt;</span><span class="nx">head</span> <span class="o">=</span> <span class="nx">t</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">dq</span><span class="o">-&gt;</span><span class="nx">count</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//add item from tail</span>
</span><span class='line'><span class="k">void</span> <span class="nx">dq_push</span><span class="p">(</span><span class="nx">dqueue</span> <span class="nx">dq</span><span class="p">,</span> <span class="nx">data</span> <span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">node</span> <span class="nx">t</span> <span class="o">=</span> <span class="nx">malloc</span><span class="p">(</span><span class="nx">sizeof</span> <span class="o">*</span><span class="nx">t</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">t</span><span class="o">-&gt;</span><span class="nx">item</span> <span class="o">=</span> <span class="nx">item</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">t</span><span class="o">-&gt;</span><span class="nx">prev</span> <span class="o">=</span> <span class="nx">dq</span><span class="o">-&gt;</span><span class="nx">tail</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">t</span><span class="o">-&gt;</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">dq</span><span class="o">-&gt;</span><span class="nx">count</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">dq</span><span class="o">-&gt;</span><span class="nx">tail</span><span class="o">-&gt;</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">t</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">dq</span><span class="o">-&gt;</span><span class="nx">head</span> <span class="o">=</span> <span class="nx">t</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">dq</span><span class="o">-&gt;</span><span class="nx">tail</span><span class="o">=</span> <span class="nx">t</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">dq</span><span class="o">-&gt;</span><span class="nx">count</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//delete first item</span>
</span><span class='line'><span class="nx">data</span> <span class="nx">dq_shift</span><span class="p">(</span><span class="nx">dqueue</span> <span class="nx">dq</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">data</span> <span class="nx">item</span> <span class="o">=</span> <span class="nx">dq</span><span class="o">-&gt;</span><span class="nx">head</span><span class="o">-&gt;</span><span class="nx">item</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">dq</span><span class="o">-&gt;</span><span class="nx">head</span><span class="o">-&gt;</span><span class="nx">next</span><span class="o">-&gt;</span><span class="nx">prev</span> <span class="o">=</span> <span class="nx">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">dq</span><span class="o">-&gt;</span><span class="nx">head</span> <span class="o">=</span> <span class="nx">dq</span><span class="o">-&gt;</span><span class="nx">head</span><span class="o">-&gt;</span><span class="nx">next</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">dq</span><span class="o">-&gt;</span><span class="nx">count</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">item</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//delete last item</span>
</span><span class='line'><span class="nx">data</span> <span class="nx">dq_pop</span><span class="p">(</span><span class="nx">dqueue</span> <span class="nx">dq</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">data</span> <span class="nx">item</span> <span class="o">=</span> <span class="nx">dq</span><span class="o">-&gt;</span><span class="nx">tail</span><span class="o">-&gt;</span><span class="nx">item</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">dq</span><span class="o">-&gt;</span><span class="nx">tail</span><span class="o">-&gt;</span><span class="nx">prev</span><span class="o">-&gt;</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">dq</span><span class="o">-&gt;</span><span class="nx">tail</span> <span class="o">=</span> <span class="nx">dq</span><span class="o">-&gt;</span><span class="nx">tail</span><span class="o">-&gt;</span><span class="nx">prev</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">dq</span><span class="o">-&gt;</span><span class="nx">count</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">item</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">void</span> <span class="nx">dq_for_each</span><span class="p">(</span><span class="nx">dqueue</span> <span class="nx">dq</span><span class="p">,</span> <span class="k">void</span> <span class="nx">f</span><span class="p">(</span><span class="nx">data</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">node</span> <span class="nx">t</span> <span class="o">=</span> <span class="nx">malloc</span><span class="p">(</span><span class="nx">sizeof</span> <span class="o">*</span><span class="nx">t</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="nx">t</span> <span class="o">=</span> <span class="nx">dq</span><span class="o">-&gt;</span><span class="nx">head</span><span class="p">;</span> <span class="nx">t</span> <span class="o">!=</span> <span class="nx">NULL</span><span class="p">;</span> <span class="nx">t</span> <span class="o">=</span> <span class="nx">t</span><span class="o">-&gt;</span><span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">f</span><span class="p">(</span><span class="nx">t</span><span class="o">-&gt;</span><span class="nx">item</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">int</span><span class="o">*</span> <span class="nx">dq_map</span><span class="p">(</span><span class="nx">dqueue</span> <span class="nx">dq</span><span class="p">,</span> <span class="nx">data</span> <span class="nx">f</span><span class="p">(</span><span class="nx">data</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">int</span> <span class="o">*</span><span class="nx">a</span> <span class="o">=</span> <span class="nx">malloc</span><span class="p">(</span><span class="nx">dq</span><span class="o">-&gt;</span><span class="nx">count</span> <span class="o">*</span> <span class="nx">sizeof</span><span class="p">(</span><span class="kr">int</span><span class="p">)),</span> <span class="nx">i</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">node</span> <span class="nx">t</span> <span class="o">=</span> <span class="nx">malloc</span><span class="p">(</span><span class="nx">sizeof</span> <span class="o">*</span><span class="nx">t</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="nx">t</span> <span class="o">=</span> <span class="nx">dq</span><span class="o">-&gt;</span><span class="nx">head</span><span class="p">,</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">t</span> <span class="o">!=</span> <span class="nx">NULL</span><span class="p">;</span> <span class="nx">t</span> <span class="o">=</span> <span class="nx">t</span><span class="o">-&gt;</span><span class="nx">next</span><span class="p">,</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">f</span><span class="p">(</span><span class="nx">t</span><span class="o">-&gt;</span><span class="nx">item</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">a</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">void</span> <span class="nx">f</span><span class="p">(</span><span class="nx">data</span> <span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">printf</span><span class="p">(</span><span class="s2">&quot;%d &quot;</span><span class="p">,</span> <span class="nx">item</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">data</span> <span class="nx">f2</span><span class="p">(</span><span class="nx">data</span> <span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">10</span><span class="o">*</span><span class="nx">item</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">void</span> <span class="nx">array_for_each</span><span class="p">(</span><span class="kr">int</span> <span class="nx">a</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">int</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">int</span> <span class="nx">i</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">dqueue</span> <span class="nx">dq</span> <span class="o">=</span> <span class="nx">malloc</span><span class="p">(</span><span class="nx">sizeof</span> <span class="o">*</span><span class="nx">dq</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">dq_init</span><span class="p">(</span><span class="nx">dq</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">dq_push</span><span class="p">(</span><span class="nx">dq</span><span class="p">,</span> <span class="mi">3</span><span class="o">*</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">printf</span><span class="p">(</span><span class="s2">&quot;count: %d\n&quot;</span><span class="p">,</span> <span class="nx">dq</span><span class="o">-&gt;</span><span class="nx">count</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">dq_for_each</span><span class="p">(</span><span class="nx">dq</span><span class="p">,</span> <span class="nx">f</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">printf</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="kr">int</span> <span class="o">*</span><span class="nx">a</span> <span class="o">=</span> <span class="nx">dq_map</span><span class="p">(</span><span class="nx">dq</span><span class="p">,</span> <span class="nx">f2</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">dq</span><span class="o">-&gt;</span><span class="nx">count</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">printf</span><span class="p">(</span><span class="s2">&quot;%d &quot;</span><span class="p">,</span> <span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">printf</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">data</span> <span class="nx">tail</span> <span class="o">=</span> <span class="nx">dq_pop</span><span class="p">(</span><span class="nx">dq</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">printf</span><span class="p">(</span><span class="s2">&quot;delete tail: %d\n&quot;</span><span class="p">,</span> <span class="nx">tail</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">data</span> <span class="nx">head</span> <span class="o">=</span> <span class="nx">dq_shift</span><span class="p">(</span><span class="nx">dq</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">printf</span><span class="p">(</span><span class="s2">&quot;delete head: %d\n&quot;</span><span class="p">,</span> <span class="nx">head</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">printf</span><span class="p">(</span><span class="s2">&quot;count: %d\n&quot;</span><span class="p">,</span> <span class="nx">dq</span><span class="o">-&gt;</span><span class="nx">count</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">dq_for_each</span><span class="p">(</span><span class="nx">dq</span><span class="p">,</span> <span class="nx">f</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">printf</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>模拟stack， queue实现push， pop， shift， unshift操作，以及两个遍历方法，for_each()和map()，其中for_each接受一个函数，函数包括一个item参数，map方法与其类似，但是返回一个数组。</p>

<!-- more -->

]]></content>
  </entry>
  
</feed>
