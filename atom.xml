<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Mirreal's Note]]></title>
  <link href="http://mirreal.github.io/atom.xml" rel="self"/>
  <link href="http://mirreal.github.io/"/>
  <updated>2014-09-03T17:11:06+08:00</updated>
  <id>http://mirreal.github.io/</id>
  <author>
    <name><![CDATA[Mirreal Ellison]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopress + Github Pages]]></title>
    <link href="http://mirreal.github.io/blog/2014/09/01/octopress-plus-github-pages/"/>
    <updated>2014-09-01T15:04:01+08:00</updated>
    <id>http://mirreal.github.io/blog/2014/09/01/octopress-plus-github-pages</id>
    <content type="html"><![CDATA[<h2>Octopress + Github Pages</h2>

<h5><a href="http://octopress.org/docs/setup">document</a></h5>

<h5>Enviroment: Ubuntu 12.00</h5>

<h3>1.Installing Ruby With RVM</h3>

<h4>Install RVM</h4>

<pre><code>curl -L https://get.rvm.io | bash -s stable --ruby
</code></pre>

<p>Then run:</p>

<pre><code>source /home/exile/.rvm/scripts/rvm
</code></pre>

<p>to start RVM</p>

<h4>Install Ruby 1.9.3</h4>

<pre><code>rvm install 1.9.3
rvm use 1.9.3
rvm rubygems latest
</code></pre>

<h3>2.Deploying to Github Pages</h3>

<h4>With Github User/Organization pages</h4>

<p>Create a new Github repository and name the repository with the format <code>username.github.io</code></p>

<p>Just an empty repository is okay.</p>

<pre><code>rake setup_github_pages
</code></pre>

<p>Next run:</p>

<pre><code>rake deploy
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Double Queue]]></title>
    <link href="http://mirreal.github.io/blog/2014/07/02/double-queue/"/>
    <updated>2014-07-02T15:45:05+08:00</updated>
    <id>http://mirreal.github.io/blog/2014/07/02/double-queue</id>
    <content type="html"><![CDATA[<h2>double queue</h2>

<h3>double linked list</h3>

<figure class='code'><figcaption><span>double_queue.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">node</span><span class="o">*</span> <span class="n">node</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">double_queue</span><span class="o">*</span> <span class="n">dqueue</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">node</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">data</span> <span class="n">item</span><span class="p">;</span>
</span><span class='line'>  <span class="n">node</span> <span class="n">prev</span><span class="p">,</span> <span class="n">next</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">struct</span> <span class="n">double_queue</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">count</span><span class="p">;</span>
</span><span class='line'>  <span class="n">node</span> <span class="n">head</span><span class="p">,</span> <span class="n">tail</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">dq_init</span><span class="p">(</span><span class="n">dqueue</span> <span class="n">dq</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">dq</span><span class="o">-&gt;</span><span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">dq</span><span class="o">-&gt;</span><span class="n">head</span> <span class="o">=</span> <span class="n">dq</span><span class="o">-&gt;</span><span class="n">tail</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">dq_empty</span><span class="p">(</span><span class="n">dqueue</span> <span class="n">dq</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">dq</span><span class="o">-&gt;</span><span class="n">count</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//add item from head</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">dq_unshift</span><span class="p">(</span><span class="n">dqueue</span> <span class="n">dq</span><span class="p">,</span> <span class="n">data</span> <span class="n">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">node</span> <span class="n">t</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span> <span class="o">*</span><span class="n">t</span><span class="p">);</span>
</span><span class='line'>  <span class="n">t</span><span class="o">-&gt;</span><span class="n">item</span> <span class="o">=</span> <span class="n">item</span><span class="p">;</span>
</span><span class='line'>  <span class="n">t</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="n">t</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">dq</span><span class="o">-&gt;</span><span class="n">head</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">dq</span><span class="o">-&gt;</span><span class="n">count</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">dq</span><span class="o">-&gt;</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">dq</span><span class="o">-&gt;</span><span class="n">tail</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">dq</span><span class="o">-&gt;</span><span class="n">head</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span>
</span><span class='line'>  <span class="n">dq</span><span class="o">-&gt;</span><span class="n">count</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//add item from tail</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">dq_push</span><span class="p">(</span><span class="n">dqueue</span> <span class="n">dq</span><span class="p">,</span> <span class="n">data</span> <span class="n">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">node</span> <span class="n">t</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span> <span class="o">*</span><span class="n">t</span><span class="p">);</span>
</span><span class='line'>  <span class="n">t</span><span class="o">-&gt;</span><span class="n">item</span> <span class="o">=</span> <span class="n">item</span><span class="p">;</span>
</span><span class='line'>  <span class="n">t</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">dq</span><span class="o">-&gt;</span><span class="n">tail</span><span class="p">;</span>
</span><span class='line'>  <span class="n">t</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">dq</span><span class="o">-&gt;</span><span class="n">count</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">dq</span><span class="o">-&gt;</span><span class="n">tail</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">dq</span><span class="o">-&gt;</span><span class="n">head</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">dq</span><span class="o">-&gt;</span><span class="n">tail</span><span class="o">=</span> <span class="n">t</span><span class="p">;</span>
</span><span class='line'>  <span class="n">dq</span><span class="o">-&gt;</span><span class="n">count</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//delete first item</span>
</span><span class='line'><span class="n">data</span> <span class="nf">dq_shift</span><span class="p">(</span><span class="n">dqueue</span> <span class="n">dq</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">data</span> <span class="n">item</span> <span class="o">=</span> <span class="n">dq</span><span class="o">-&gt;</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">item</span><span class="p">;</span>
</span><span class='line'>  <span class="n">dq</span><span class="o">-&gt;</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="n">dq</span><span class="o">-&gt;</span><span class="n">head</span> <span class="o">=</span> <span class="n">dq</span><span class="o">-&gt;</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>  <span class="n">dq</span><span class="o">-&gt;</span><span class="n">count</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">item</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//delete last item</span>
</span><span class='line'><span class="n">data</span> <span class="nf">dq_pop</span><span class="p">(</span><span class="n">dqueue</span> <span class="n">dq</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">data</span> <span class="n">item</span> <span class="o">=</span> <span class="n">dq</span><span class="o">-&gt;</span><span class="n">tail</span><span class="o">-&gt;</span><span class="n">item</span><span class="p">;</span>
</span><span class='line'>  <span class="n">dq</span><span class="o">-&gt;</span><span class="n">tail</span><span class="o">-&gt;</span><span class="n">prev</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="n">dq</span><span class="o">-&gt;</span><span class="n">tail</span> <span class="o">=</span> <span class="n">dq</span><span class="o">-&gt;</span><span class="n">tail</span><span class="o">-&gt;</span><span class="n">prev</span><span class="p">;</span>
</span><span class='line'>  <span class="n">dq</span><span class="o">-&gt;</span><span class="n">count</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">item</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">dq_for_each</span><span class="p">(</span><span class="n">dqueue</span> <span class="n">dq</span><span class="p">,</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="n">data</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">node</span> <span class="n">t</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span> <span class="o">*</span><span class="n">t</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">t</span> <span class="o">=</span> <span class="n">dq</span><span class="o">-&gt;</span><span class="n">head</span><span class="p">;</span> <span class="n">t</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="n">t</span> <span class="o">=</span> <span class="n">t</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">f</span><span class="p">(</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">item</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span><span class="o">*</span> <span class="nf">dq_map</span><span class="p">(</span><span class="n">dqueue</span> <span class="n">dq</span><span class="p">,</span> <span class="n">data</span> <span class="n">f</span><span class="p">(</span><span class="n">data</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="o">*</span><span class="n">a</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">dq</span><span class="o">-&gt;</span><span class="n">count</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)),</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="n">node</span> <span class="n">t</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span> <span class="o">*</span><span class="n">t</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">t</span> <span class="o">=</span> <span class="n">dq</span><span class="o">-&gt;</span><span class="n">head</span><span class="p">,</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">t</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="n">t</span> <span class="o">=</span> <span class="n">t</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">,</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">f</span><span class="p">(</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">item</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">f</span><span class="p">(</span><span class="n">data</span> <span class="n">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d &quot;</span><span class="p">,</span> <span class="n">item</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">data</span> <span class="nf">f2</span><span class="p">(</span><span class="n">data</span> <span class="n">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">10</span><span class="o">*</span><span class="n">item</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">array_for_each</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="n">dqueue</span> <span class="n">dq</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span> <span class="o">*</span><span class="n">dq</span><span class="p">);</span>
</span><span class='line'>  <span class="n">dq_init</span><span class="p">(</span><span class="n">dq</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">dq_push</span><span class="p">(</span><span class="n">dq</span><span class="p">,</span> <span class="mi">3</span><span class="o">*</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;count: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">dq</span><span class="o">-&gt;</span><span class="n">count</span><span class="p">);</span>
</span><span class='line'>  <span class="n">dq_for_each</span><span class="p">(</span><span class="n">dq</span><span class="p">,</span> <span class="n">f</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="o">*</span><span class="n">a</span> <span class="o">=</span> <span class="n">dq_map</span><span class="p">(</span><span class="n">dq</span><span class="p">,</span> <span class="n">f2</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">dq</span><span class="o">-&gt;</span><span class="n">count</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d &quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">data</span> <span class="n">tail</span> <span class="o">=</span> <span class="n">dq_pop</span><span class="p">(</span><span class="n">dq</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;delete tail: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">tail</span><span class="p">);</span>
</span><span class='line'>  <span class="n">data</span> <span class="n">head</span> <span class="o">=</span> <span class="n">dq_shift</span><span class="p">(</span><span class="n">dq</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;delete head: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">head</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;count: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">dq</span><span class="o">-&gt;</span><span class="n">count</span><span class="p">);</span>
</span><span class='line'>  <span class="n">dq_for_each</span><span class="p">(</span><span class="n">dq</span><span class="p">,</span> <span class="n">f</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>模拟stack， queue实现push， pop， shift， unshift操作，以及两个遍历方法，for_each()和map()，其中for_each接受一个函数，函数包括一个item参数，map方法与其类似，但是返回一个数组。</p>

<!-- more -->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[变长编码的三种方法]]></title>
    <link href="http://mirreal.github.io/blog/2014/02/14/infromation-code/"/>
    <updated>2014-02-14T10:27:39+08:00</updated>
    <id>http://mirreal.github.io/blog/2014/02/14/infromation-code</id>
    <content type="html"><![CDATA[<p>信息编码是数据压缩的的基础理论。常用的变长编码法有三种：香农（Shannon）编码，费诺（Fano）编码，霍夫曼（Huffman）编码。</p>

<p>通常情况下，霍夫曼编码法的编码效率最优。</p>

<h2>1.香农编码法</h2>

<p>香农编码法是一种很基础的编码方法，效率很低。</p>

<p>方法如下：</p>

<ol>
<li><p>将M个信源按其概率递减顺序排列</p></li>
<li><p>计算各个消息的<code>-log q(Xm)</code></p></li>
</ol>


<p>香农编码法的C语言实现：</p>

<figure class='code'><figcaption><span>shannon.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">//编译指令：gcc shannon.c -lm</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;math.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;请输入信源符号个数：&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;请输入各符号的概率：&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">double</span> <span class="n">x</span><span class="p">[</span><span class="n">n</span><span class="p">];</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;x[%d]= &quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%lf&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//选择排序（降序）</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">v</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="n">j</span><span class="p">];</span> <span class="n">v</span> <span class="o">&gt;</span> <span class="n">x</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">x</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">x</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//计算码长：1-log2(p(xi))向上取整</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">k</span><span class="p">[</span><span class="n">n</span><span class="p">];</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">k</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="n">log</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">/</span> <span class="n">log</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">k</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="p">(</span><span class="o">-</span><span class="n">log</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">/</span> <span class="n">log</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span> <span class="n">k</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//累加概率</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">pa</span><span class="p">[</span><span class="n">n</span><span class="p">];</span>
</span><span class='line'>  <span class="n">pa</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">pa</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">pa</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//将累加概率转换为二进制</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">code</span><span class="p">[</span><span class="n">n</span><span class="p">][</span><span class="n">n</span><span class="p">];</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">t</span> <span class="o">=</span> <span class="n">pa</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">k</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kt">double</span> <span class="n">temp</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">t</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">temp</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">code</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;1&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">t</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">t</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">code</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">t</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">t</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//输出结果</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%16s %12s %16s %4s %4c%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="s">&quot;信源&quot;</span><span class="p">,</span> <span class="s">&quot;概率p(x)&quot;</span><span class="p">,</span> <span class="s">&quot;累加概率&quot;</span><span class="p">,</span> <span class="s">&quot;码长&quot;</span><span class="p">,</span> <span class="sc">&#39; &#39;</span><span class="p">,</span> <span class="s">&quot;码字code&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%12d %12lf %12lf %4d %4c&quot;</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">pa</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">k</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="sc">&#39; &#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">k</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%c&quot;</span><span class="p">,</span> <span class="n">code</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h2>2.费诺编码法</h2>

<p>这个编码方法准确说应该叫做Shannon-Fano编码法。这项技术是香农于1948年，在他介绍信息理论的文章“通信数学理论”中被提出的，归功于范诺，是由于他在不久以后以技术报告发布了它。</p>

<p>香农-费诺编码法的C语言实现：</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;math.h&gt;

int n;
double* x;
char **code;

void fano(int a, int b) {
  if (b-a &lt; 1) return;
  int i;
  double sum = 0;
  for (i = a; i &lt;= b; i++) {
    sum += x[i];
  }
  double s[n], pa = 0;
  for (i = a; i &lt;= b; i++) {
    pa += x[i];
    s[i] = fabs(2*pa - sum);
  }
  int min = a;
  for (i = a+1; i &lt;= b; i++) {
    if(s[i] &lt;= s[min]) min = i;
  }
  for (i = a; i &lt;= b; i++) {
    if (i &lt;= min) strcat(code[i], "0");
    else strcat(code[i], "1");
  }
  fano(a, min);
  fano(min+1, b);
}

int main() {
  int i, j, n;
  printf("请输入信源符号个数：");
  scanf("%d", &amp;n);
  printf("请输入各符号的概率：");

  x = malloc(n * sizeof(double));
  for (i = 0; i &lt; n; i++) {
    printf("x[%d]= ", i);
    scanf("%lf", &amp;x[i]);
  }

  for (i = 0; i &lt; n-1; i++) {
    double v;
    for (j = i+1, v = x[j]; v &gt; x[j-1] &amp;&amp; j &gt;= 1; j--) {
      x[j] = x[j-1];
    }
    x[j] = v;
    //printf("x[%d]= %lf", i, x[i]);
  }

  code = malloc(n * sizeof(char*));;
  for (i = 0; i &lt; n; i++) {
    code[i] = malloc(n * sizeof(char));
  }
  fano(0, n-1);
  printf("%16s %12s %4c%s\n", "信源", "概率p(x)", ' ', "码字code");
  for (i = 0; i &lt; n; i++) {
    printf("%12d %12lf %4c %s\n", i+1, x[i], ' ', code[i]);
  }
  return 0;
}
</code></pre>

<h2>3.霍夫曼编码法</h2>

<p>香农当然知道Shannon-Fano编码法不是最优的，果然没太久，费诺的学生霍夫曼就找到一种更优的编码方法。</p>

<p>霍夫曼编码法的C语言实现：</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

#define MAX_VALUE 1

typedef char** huffman_code;
typedef struct {
  double weight;
  int parent, lchild, rchild;
} HTNode, *huffman_tree;
typedef struct {
  int s1;
  int s2;
} min_code;

huffman_code Huffman_coding(huffman_tree HT, huffman_code HC, double *x, int n);
min_code select_min(huffman_tree HT, int n);

int main() {
  huffman_tree HT = NULL;
  huffman_code HC = NULL;
  int i, n;
  printf("请输入信源符号个数：");
  scanf("%d", &amp;n);
  double *x = malloc((n+1) * sizeof(double));
  x[0] = 0;
  printf("请输入各符号的概率：");
  for (i = 1; i &lt;= n; i++) {
    printf("X[%d]= ", i);
    scanf("%lf", &amp;x[i]);
  }

  HC = Huffman_coding(HT, HC, x, n);
  printf("\nhuffman_code:\n");
  printf("Number Weight Code\n");
  for (i = 1; i &lt;= n; i++) printf("%-6d %-6lf %-4s\n", i, x[i], HC[i]);
}

huffman_code Huffman_coding(huffman_tree HT, huffman_code HC, double *x, int n) {
  int i, s1 = 0, s2 = 0;
  char *code;
  int f, c, start, m;
  huffman_tree p;
  min_code min;
  if (n &lt;= 1) return;
  m = 2*n - 1;
  HT = malloc((m+1) * sizeof(HTNode));

  for (p = HT, i = 0; i &lt;= n; i++, p++, x++) {
    p-&gt;weight = *x;
    p-&gt;parent = 0;
    p-&gt;lchild = 0;
    p-&gt;rchild = 0;
  }
  for (; i &lt;= m; i++, p++) {
    p-&gt;weight = 0;
    p-&gt;parent = 0;
    p-&gt;lchild = 0;
    p-&gt;rchild = 0;
  }
  for (i = n+1; i &lt;= m; i++) {
    min = select_min(HT, i-1);
    s1 = min.s1;
    s2 = min.s2;
    HT[s1].parent = i;
    HT[s2].parent = i;
    HT[i].lchild = s1;
    HT[i].rchild = s2;
    HT[i].weight = HT[s1].weight + HT[s2].weight;
  }

  printf("HT List:\n");
  printf("%8s %8s %8s %8s %8s\n", "Number", "weight", "parent", "lchild", "rchild");
  for (i = 1; i &lt;= m; i++) {
    printf("%8d %8lf %8d %8d %8d\n",
      i, HT[i].weight, HT[i].parent, HT[i].lchild, HT[i].rchild);
  }
  HC = malloc((n+1) * sizeof(char *));
  code = malloc(n * sizeof(char *));
  code[n-1] = '\0';
  for (i = 1; i &lt;= n; i++) {
    start = n-1;
    for (c = i, f = HT[i].parent; f != 0; c = f, f = HT[f].parent) {
      if (HT[f].lchild == c) code[--start] = '0';
      else code[--start] = '1';
    }
    HC[i] = malloc((n-start) * sizeof(char *));
    strcpy(HC[i], &amp;code[start]);
  }
  free(code);
  return HC;
}

min_code select_min(huffman_tree HT, int n) {
  min_code code;
  int s1, s2;
  double m1, m2;
  int i;
  s1 = s2 = 1;
  m1 = m2 = MAX_VALUE;
  for (i = 1; i &lt;= n; i++) {
    if (HT[i].parent == 0) {
      if (HT[i].weight &lt; m1) {
        m2 = m1;
        s2 = s1;
        m1 = HT[i].weight;
        s1 = i;
      } else if (HT[i]. weight &lt; m2) {
        m2 = HT[i].weight;
        s2 = i;
      }
    }
  }

  code.s1 = s1;
  code.s2 = s2;
  return code;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
