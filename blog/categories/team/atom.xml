<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Team | Mirreal Note]]></title>
  <link href="http://blog.mirreal.net/blog/categories/team/atom.xml" rel="self"/>
  <link href="http://blog.mirreal.net/"/>
  <updated>2017-11-03T12:53:54+08:00</updated>
  <id>http://blog.mirreal.net/</id>
  <author>
    <name><![CDATA[Patrick Ran]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScript 异常的防范与监控]]></title>
    <link href="http://blog.mirreal.net/blog/2017/06/21/javascript-stack-trace/"/>
    <updated>2017-06-21T23:12:00+08:00</updated>
    <id>http://blog.mirreal.net/blog/2017/06/21/javascript-stack-trace</id>
    <content type="html"><![CDATA[<p>一套完善的前端体系应少不了异常统计与监控，即使有足够的质量保证体系，难免会出现一些意料之外的事，尤其是在复杂的网路环境和运行环境之下。为了保证代码的健壮性以及页面的稳定性，我们从多个方面来做异常的防范和监控。</p>

<h2>三种思路</h2>

<h3>主动防御</h3>

<p>对于我们操作的数据，尤其是由 API 接口返回的，时常会有一个很复杂的深层嵌套的数据结构。为了代码的健壮性，很多时候需要对每一层访问都作空值判断，就像这样：</p>

<pre><code class="javascript">props.user &amp;&amp;
props.user.posts &amp;&amp;
props.user.posts[0] &amp;&amp;
props.user.posts[0].comments &amp;&amp;
props.user.posts[0].comments[0]
</code></pre>

<p>类似的代码大家可能都写过，没写过大概也见到别人写过。看起来确实相当地不美观，有句话说得很棒：</p>

<p><strong>The opposite of beautiful is not ugly, but wrong.</strong></p>

<p>我们得找到一种，更简单、更优雅、更安全的方式来处理这种情形。参考这篇文章：<a href="https://medium.com/javascript-inside/safely-accessing-deeply-nested-values-in-javascript-99bf72a0855a">Safely Accessing Deeply Nested Values In JavaScript</a>，文章提到借助 Ramda、Lenses、Lodash 以及 Immutable.js 等类库的方式，并提供一个非常简洁明了的原生解决方案：</p>

<pre><code class="js">function getIn(p, o) {
    return p.reduce(function(xs, x) {
        return (xs &amp;&amp; xs[x]) ? xs[x] : null;
    }, o);
}
</code></pre>

<p>接下来我们这样访问就可以了：</p>

<pre><code class="javascript">getIn(['user', 'posts', 0, 'comments'], props)
</code></pre>

<p>如果正常访问到，则返回对应的值，否则返回 <code>null</code>。</p>

<p>这里提供的只是主动防御的一种情形，关于如何编写更安全的代码这里不作深入展开。</p>

<h3>全局监控</h3>

<p>浏览器提供 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalEventHandlers/onerror"><code>window.onerror</code></a> API 来帮助我们进行全局的错误监控：</p>

<ul>
<li>当 JavaScript 运行时错误（包括语法错误）发生时，会执行 `window.onerror()&#8220;</li>
<li>当一项资源（如 <code>&lt;img&gt;</code> 或 <code>&lt;script&gt;</code> ）加载失败，能被单一的 <code>window.addEventListener</code> 捕获</li>
</ul>


<pre><code class="javascript">/**
 * @param  {String} message 错误信息
 * @param  {String} source  发生错误的脚本URL
 * @param  {Number} lineno  发生错误的行号
 * @param  {Number} colno   发生错误的列号
 * @param  {Object} error   Error对象
 */
window.onerror = function(message, source, lineno, colno, error) {
  // ...
}
</code></pre>

<p>其中 error 对象包含详细的错误堆栈信息，在 IE9 以前，没有这个参数。</p>

<h3>针对性捕获 try..catch</h3>

<p>可以通过 try..catch 来主动抓取错误，想要对一段代码 try..catch，我们可以这样：</p>

<pre><code class="javascript">try {
  // ...
} catch (error) {
  handler(error)
}
</code></pre>

<p>对一个函数做 try..catch 封装:</p>

<pre><code class="javascript">function tryify(func) {
  return function() {
    try {
      return func.apply(this, arguments)
    } catch (error) {
      handleError(error)

      throw error
    }
  }
}
</code></pre>

<h2>为什么是 script error</h2>

<p>方案已经明确，但还有一些问题。在查看 JavaScript 错误统计时，发现 80% 以上都是 &ldquo;script error&#8221;。原来，当加载自不同域的脚本中发生语法错误时，为避免信息泄露，语法错误的细节将不会报告，而代之简单的 &#8220;Script error.&rdquo;</p>

<p>而在大多数情况下，我们的静态资源放在专门的 CDN 服务器上，跟站点并不在一个域，所以如果只是简单的抓取，只会得到一堆意义不大的 <code>script error</code></p>

<p>解决方案：</p>

<ul>
<li>添加 CORS 支持</li>
<li>使用 try..catch</li>
</ul>


<h3>添加 CORS 支持</h3>

<p>需要做两点：</p>

<p>1.在 script 便签添加 crossorigin，默认值 <code>crossorigin="anonymous"</code></p>

<p>&#8220;`html</p>

<script src="//xxx.com/example.js" crossorigin></script>


<pre><code>
在 require.js 里提供一个 [onNodeCreated hook](https://github.com/requirejs/requirejs/blob/e97fe4dd894d8a07712156e17cefa28b954a9c3e/require.js#L1946)，供我们提供扩展，要添加 crossorigin 属性，如下所示：
</code></pre>

<script>
// 如果在 require.js 加载之前定义了 requirejs，require.js 会将其作为一个对象传入 requirejs.config
var requirejs = {
  onNodeCreated: function(node, config, id, url) {
    node.setAttribute('crossorigin', 'anonymous')
  }
}
</script>


<script src="//xxx.com/require.js" charset="utf-8"></script>


<pre><code>
在 2.2.0 版本以上可用（很遗憾的是，目前的集成解决方案版本刚好低于这个版本）。

2.同时在 CDN 服务器增加响应头 `access-control-allow-orgin`，配置允许访问 CORS 的域，否则浏览器直接将禁止加载。

### try..catch

这一点上面也有提到，算是一种比较通用，可定制强的方案。当然，在性能上也会有一些损耗。

综合考虑，try..catch 通用性更好，但由于其在性能方面的一些损耗，CORS 优于 try..catch

## 一个监控小工具

随后，介绍一个 JavaScript stack trace 的小工具：https://github.com/CurtisCBS/monitor ，工具由 [Curtis](https://github.com/CurtisCBS) 和 [mirreal](https://github.com/mirreal) 共同完成。

主要是用于捕获页面 JavaScript 异常报错，捕获异常类型包含:

* JavaScript runtime 异常捕捉 √
* 静态资源 load faided 异常捕捉 √
* console.error 的异常捕获 √
* try..catch 错误捕获 √

使用方式也很简单，但使用 script mode 引入文件后，调用 init 函数，进行初始化配置和监听
</code></pre>

<script src="//unpkg.com/jstracker@latest/dist/jstracker.js"></script>




<script>
  jstracker.init({
    delay: 1000,
    maxError: 10,
    sampling: 1,
    report: function(errorLogs) {
      console.table(errorLogs)
    }
  })
</script>


<pre><code>
如果是使用 module mode，如下：
</code></pre>

<p>// npm install jstracker &ndash;save
import jstracker from &lsquo;jstracker&rsquo;</p>

<p>jstracker.init({
  concat: false,
  report: function(errorLogs) {
    // console.log(&lsquo;send&rsquo;)
  }
})
&#8220;`</p>

<p>如果要使用 try..catch 捕获，jstracker 暴露出一个 <code>tryJS</code> 对象，可以处理 try..catch 包装，就像这样：</p>

<pre><code class="javascript">import jstracker from 'jstracker';

this.handleSelect = jstracker.tryJS.wrap(this.handleSelect);
</code></pre>

<p>所有错误信息统一由 report 函数处理，可以在此之上做数据处理：</p>

<pre><code class="javascript">// ubt.js
import jstracker from 'jstracker';
import utility from 'utility';

jstracker.init({
    concat: false,
    report: function(errorLogs) {
        const errorLog = errorLogs[0];
        errorLog.ua = window.navigator.userAgent;
        ubtTracker.send(errorLog);
    }
});

const ubtTracker = {
    key: {
        UBT_JS_TRACKER: 'xxxx-xxxx-xxxx'
    },

    send(data) {
        if (typeof window['__bfi'] === 'undefined') window['__bfi'] = [];

        const value = utility.deserializeUrl(data);
        window['__bfi'].push(['_tracklog', this.key.UBT_JS_TRACKER, value]);
    }
};

function wrapContext(ctx) {
    for (const func in ctx) {
        ctx[func] = jstracker.tryJS.wrap(ctx[func]);
    }
}

export {
    wrapContext,
    ubtTracker,
    jstracker
};
</code></pre>

<h2>概述</h2>

<p>作为开发者以及项目维护者的身份，我们应当编写更安全健壮的代码。但由于环境的多样性，无论再完善的测试，code review 都难免都所疏漏，我们需要一套监控系统来完善整个前端体系。</p>

<p>在监控的时候，出于同源安全策略无法拿到准确的错误信息，在此，有两种解决方案：</p>

<ul>
<li>增加 CORS 支持</li>
<li>使用 try..catch 进行异常捕获</li>
</ul>


<p>最后，我们对整个监控工作封装了一个基础的核心，可以监控 JavaScript Runtime 异常，资源加载异常，以及 try..catch 捕获异常等，并给出一个实际工作中的示例。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[移除在 ESM 模式生成的严格模式]]></title>
    <link href="http://blog.mirreal.net/blog/2017/06/05/remove-strict-node/"/>
    <updated>2017-06-05T18:00:00+08:00</updated>
    <id>http://blog.mirreal.net/blog/2017/06/05/remove-strict-node</id>
    <content type="html"><![CDATA[<h2>起源</h2>

<p>项目升级构建方式，以前的代码采用 AMD 风格组织代码，并使用 <code>r.js</code> 完成打包优化工作。后续成员选择采用 ES6 的风格编写代码，然后 webpack + babel 完成打包构建。迁移工作并不如想象中那么容易，终于完成各种配置，测试时候发现问题：抛出一个语法错误。错误很快被定位，属于历史代码的不规范写法，之所以现在暴露出来是因为新的构建方式会加入 <code>"use strict"</code>。</p>

<h2>严格模式</h2>

<p>在编写代码的过程中，我们使用 <code>strict mode</code> 是一种很好的方式，严格模式会将 JavaScript 陷阱直接变成明显的错误，比如未声明导致的全局变量，可以让我们开发过程中就发现错误。</p>

<p>众所周知，JavaScript 这门语言之前存在大量不好的设计，使用严格模式意味着在采用一种限制性更高的方式编写代码，同时更 “安全”。但这里所谓的安全在生产环境又可能是另外一回事，尤其是对于那些上了年纪的历史代码，我们更倾向于在生产环境去除严格模式。</p>

<h2>ES2015+</h2>

<p>现在大部分人已经在使用更强大，更具有表现力的 <code>ES2015+</code> 编写代码。可能还会使用到 babel 来转化成用于生产环境运行的代码，在使用 <code>preset es2015</code> 时，会自动加入 <code>“use strict”</code>。</p>

<p>babel 的处理方式是将 ES2015 模块转换成 <code>CommonJS</code> 格式的，然后再统一处理，即 <code>transform-es2015-modules-commonjs</code>，这个插件位于 <code>preset es2015</code> 中，并且依赖于 <code>transform-strict-mode</code></p>

<h2>也许你会想去掉严格模式</h2>

<p>也许你会想去掉严格模式，毕竟对于一些历史代码，很难预测加入严格模式会导致什么异常。</p>

<!-- 可以从两个方面来考虑： -->


<ul>
<li>第一，在处理过程中去掉 <code>"use strict"</code>，这里不用我们自己去写了，借助这个插件 <code>transform-remove-strict-mode</code></li>
<li>第二，不用 <code>transform-es2015-modules-commonjs</code>，可以使用 <code>webpack 2</code> 直接处理 ES6 模块</li>
</ul>


<h3>方案一</h3>

<pre><code class="sh">npm install babel-plugin-transform-remove-strict-mode --save-dev
</code></pre>

<p>修改 <code>.babelrc</code></p>

<pre><code class="json">{
    "presets": [
        ["es2015"],
        "stage-0",
        "react"
    ],
    "plugins": [
        "transform-remove-strict-mode"
    ]
}
</code></pre>

<h3>方案二</h3>

<blockquote><p><a href="https://babeljs.io/docs/plugins/preset-es2015/#optionsmodules">modules</a></p>

<p><code>"amd" | "umd" | "systemjs" | "commonjs" | false</code>, defaults to <code>"commonjs"</code>.</p>

<p>Enable transformation of ES6 module syntax to another module type.</p>

<p>Setting this to <code>false</code> will not transform modules.</p></blockquote>

<p>我们去掉 <code>preset es2015</code> 的模块处理，改由 <code>webpack</code> 来处理：</p>

<pre><code class="json">{
    "presets": [
        ["es2015", { "modules": false }],
        "stage-0",
        "react"
    ]
}
</code></pre>

<p>这种方案也能解决之前问题，因为之前存在问题的模块使用 ES5 编写的，使用 AMD 风格。</p>

<p>但是，参考 <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-strict-mode-code">http://www.ecma-international.org/ecma-262/6.0/#sec-strict-mode-code</a> ，在 ES6 语法下，模块系统以及 class 等仍然都是工作在 <code>strict mode</code> 下的，而 webpack2 的也确实是这样处理的。</p>

<p>实现对语言本身是没问题的，使用新语法意味着我们要抛弃掉以前一些设计不好的地方，编写高质量的代码。</p>

<h3>对比</h3>

<p>相比而言，方案二更合适，因为方案一处理的过程实际是删除所有<code>"use strict"</code>，有时候未必符合你本来的意愿。</p>

<p>采用方案二还有一些好处，比如可以使用 <code>webpack2</code> 已经支持的 <code>tree shaking</code> 优化技术，因为这项技术基于 <code>ES6 Modules</code>，得让 <code>webpack</code> 直接处理才能使用。</p>

<h2>后续</h2>

<p>这种属于历史遗留问题，比如不小心引入的全局变量，类似的代码质量问题还不少。</p>

<p>所以，我们使用 lint 工具来帮助我们避免这种问题，对于代码质量的要求必须苛刻。</p>
]]></content>
  </entry>
  
</feed>
